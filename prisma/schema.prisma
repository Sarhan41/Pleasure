// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Authentication Schemas

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Wishlist              Wishlist[]
  CartItems             CartItems[]
  orders                Order[]
  reviews               Review[]
  Address               Address[]
}

model Address {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderId        Order[]
  phone          String
  AlternatePhone String?
  addressLine1   String
  addressLine2   String?
  addressLine3   String?
  pincode        String
  city           String
  state          String
  AddressType    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// dashboard schemas

model Category {
  id        String    @id @default(uuid())
  products  Product[] @relation("CategoryToProduct")
  imageUrl  String
  name      String
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String      @id @default(uuid())
  categoryId  String
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  images      Image[]
  colors      Color[]
  sizes       Size[]
  orderItems  orderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Wishlist    Wishlist[]
  CartItems   CartItems[]
  reviews     Review[]
  description String?

  @@index([categoryId])
}

model Color {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  value     String
  name      String
  toLink    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Size {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  SKUvalue  String
  name      String
  price     String
  discountedprice  String?
  quantity  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Wishlist {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

model CartItems {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
  sizeName      String
  Price     Int
  color     String?
  

  @@index([userId])
  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  orderItems orderItem[]
  total      Int
  status     String
  isPaid     Boolean     @default(false)
  AddressId  String
  Address    Address     @relation(fields: [AddressId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  userId     String
  user       User        @relation(fields: [userId], references: [id])
}

model orderItem {
  id        String  @id @default(uuid())
  name      String
  Price     Int
  quantity  Int
  size      String
  sizeSKU   String
  color     String?
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
